sliderInput("sales", "Select Sales:", min = 100, max = 1000, value = 550),
),
mainPanel(
plotOutput("barplot") # Output placeholder for the interactive table
)
)
)
server <- function(input, output) {
output$barplot <- renderPlot({
filtered_data <- Perfume_data[Perfume_data$State == input$State, ]
ggplot(filtered_data, aes(x = Product_type, y = Sales)) +
geom_point(color = "blue") +
xlim(100, 1000) +
ylim(50, 1050) +
geom_vline(xintercept = input$sales, color = "orange") +
})
server <- function(input, output) {
output$barplot <- renderPlot({
filtered_data <- Perfume_data[Perfume_data$State == input$State, ]
ggplot(filtered_data, aes(x = Product_type, y = Sales)) +
geom_point(color = "blue") +
xlim(100, 1000) +
ylim(50, 1050) +
geom_vline(xintercept = input$sales, color = "orange")
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$barplot <- renderPlot({
filtered_data <- Perfume_data[Perfume_data$State == input$State, ]
ggplot(filtered_data, aes(x = Product_type, y = Sales)) +
geom_bar(color = "blue") +
xlim(100, 1000) +
ylim(50, 1050) +
geom_vline(xintercept = input$sales, color = "orange")
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$barplot <- renderPlot({
filtered_data <- Perfume_data[Perfume_data$State == input$State, ]
ggplot(filtered_data, aes(x = Product_type, y = Sales)) +
geom_bar(color = "blue") +
ylim(50, 1050) +
geom_vline(xintercept = input$sales, color = "orange")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Sales by Product Type"),
sidebarLayout(
sidebarPanel(
selectInput("State",
"Select State:",
choices = unique(Perfume_data$State),
selected = "TX"),
),
mainPanel(
plotOutput("barplot") # Output placeholder for the interactive table
)
)
)
server <- function(input, output) {
output$barplot <- renderPlot({
filtered_data <- Perfume_data[Perfume_data$State == input$State, ]
ggplot(filtered_data, aes(x = Product_type, y = Sales)) +
geom_bar(color = "blue") +
ylim(50, 1050) +
geom_vline(xintercept = input$sales, color = "orange")
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$barplot <- renderPlot({
filtered_data <- Perfume_data[Perfume_data$State == input$State, ]
ggplot(filtered_data, aes(x = Product_type, y = Sales)) +
geom_bar(color = "blue") +
ylim(50, 1050)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$barplot <- renderPlot({
filtered_data <- Perfume_data[Perfume_data$State == input$State, ]
ggplot(filtered_data, aes(x = Product_type, y = Sales)) +
geom_bar(color = "blue")
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$barplot <- renderPlot({
filtered_data <- Perfume_data[Perfume_data$State == input$State, ]
ggplot(filtered_data, aes(x = Product_type, y = Sales)) +
geom_bar(stat = "identity", fill = "blue")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Sales by Product Type"),
sidebarLayout(
sidebarPanel(
selectInput("State",
"Select State:",
choices = unique(Perfume_data$State),
selected = "TX"),
sliderInput("Sales", "Select Sales:", min = 100, max = 1000, value = 550)
),
mainPanel(
plotOutput("barplot") # Output placeholder for the interactive table
)
)
)
server <- function(input, output) {
output$barplot <- renderPlot({
filtered_data <- Perfume_data[Perfume_data$State == input$State, ]
ggplot(filtered_data, aes(x = Product_type, y = Sales)) +
geom_bar(stat = "identity", fill = "blue") +
geom_hline(yintercept = input$Sales, color = "orange")
})
}
shinyApp(ui = ui, server = server)
library(rsconnect)
rsconnect::setAccountInfo(
name='keni-17',
token='C1B0A00830B4DAEF7074432A817D23C2',
secret='75HamsLrxEH4wwkEqxpW9vnrRlzsfmVk+Kbtb0Ia'
)
rsconnect::deployApp("C:/Users/kenic/OneDrive/Documents/4/STAT321/Lecture Assignment 4/StateSales")
rsconnect::setAccountInfo(
name='keni-17',
token='C1B0A00830B4DAEF7074432A817D23C2',
secret='75HamsLrxEH4wwkEqxpW9vnrRlzsfmVk+Kbtb0Ia'
)
rsconnect::deployApp("C:/Users/kenic/OneDrive/Documents/4/STAT321/Lecture Assignment 4/StateSales")
rsconnect::setAccountInfo(
name='keni-17',
token='C1B0A00830B4DAEF7074432A817D23C2',
secret='75HamsLrxEH4wwkEqxpW9vnrRlzsfmVk+Kbtb0Ia'
)
rsconnect::deployApp("C:/Users/kenic/OneDrive/Documents/4/STAT321/Lecture Assignment 4/StateSales")
library(shiny)
library(DT)
Perfume_data <- read_csv("C:/Users/kenic/OneDrive/Documents/4/STAT321/Lecture Assignment 4/StateSales/Perfume_data.csv")
library(shiny)
library(DT)
Perfume_data <- read_csv("Perfume_data.csv")
library(shiny)
library(DT)
ui <- fluidPage(
titlePanel("Sales by Product Type"),
sidebarLayout(
sidebarPanel(
selectInput("State",
"Select State:",
choices = unique(Perfume_data$State),
selected = "TX"),
sliderInput("Sales", "Select Sales:", min = 100, max = 1000, value = 550)
),
mainPanel(
plotOutput("barplot") # Output placeholder for the interactive table
)
)
)
server <- function(input, output) {
output$barplot <- renderPlot({
Perfume_data <- read.csv("Perfume_data.csv")
filtered_data <- Perfume_data[Perfume_data$State == input$State, ]
ggplot(filtered_data, aes(x = Product_type, y = Sales)) +
geom_bar(stat = "identity", fill = "blue") +
geom_hline(yintercept = input$Sales, color = "orange")
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
Perfume_data <- read.csv("Perfume_data.csv")
output$barplot <- renderPlot({
filtered_data <- Perfume_data[Perfume_data$State == input$State, ]
ggplot(filtered_data, aes(x = Product_type, y = Sales)) +
geom_bar(stat = "identity", fill = "blue") +
geom_hline(yintercept = input$Sales, color = "orange")
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
Perfume_data <- read.csv("C:/Users/kenic/OneDrive/Documents/4/STAT321/Lecture Assignment 4/StateSales/Perfume_data.csv")
output$barplot <- renderPlot({
filtered_data <- Perfume_data[Perfume_data$State == input$State, ]
ggplot(filtered_data, aes(x = Product_type, y = Sales)) +
geom_bar(stat = "identity", fill = "blue") +
geom_hline(yintercept = input$Sales, color = "orange")
})
}
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(
name='keni-17',
token='C1B0A00830B4DAEF7074432A817D23C2',
secret='75HamsLrxEH4wwkEqxpW9vnrRlzsfmVk+Kbtb0Ia'
)
rsconnect::deployApp("C:/Users/kenic/OneDrive/Documents/4/STAT321/Lecture Assignment 4/StateSales")
getwd()
getwd()
server <- function(input, output) {
Perfume_data <- read.csv("C:/Users/kenic/OneDrive/Documents/Perfume_data.csv")
output$barplot <- renderPlot({
filtered_data <- Perfume_data[Perfume_data$State == input$State, ]
ggplot(filtered_data, aes(x = Product_type, y = Sales)) +
geom_bar(stat = "identity", fill = "blue") +
geom_hline(yintercept = input$Sales, color = "orange")
})
}
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(
name='keni-17',
token='C1B0A00830B4DAEF7074432A817D23C2',
secret='75HamsLrxEH4wwkEqxpW9vnrRlzsfmVk+Kbtb0Ia'
)
rsconnect::deployApp("C:/Users/kenic/OneDrive/Documents/4/STAT321/Lecture Assignment 4/StateSales")
setwd("~/4/STAT321/Lecture Assignment 4/StateSales")
rsconnect::setAccountInfo(
name='keni-17',
token='C1B0A00830B4DAEF7074432A817D23C2',
secret='75HamsLrxEH4wwkEqxpW9vnrRlzsfmVk+Kbtb0Ia'
)
rsconnect::deployApp("C:/Users/kenic/OneDrive/Documents/4/STAT321/Lecture Assignment 4/StateSales")
setwd("~/")
getwd()
ggplot(Rec_final_clean_nfl, aes(x = Yards, y = Receptions)) +
geom_point(size = 3, color = '#e5ba37') +
labs(title = "Receptions vs. Yards",
x = "Yards",
y = "Receptions") +
ylim(30, 130) +
xlim(300, 1800) +
# add a vertical line at the median yards because yards is skewed
geom_vline(xintercept = median(Rec_final_clean_nfl$Yards), color = "darkgrey") +
theme_minimal() +
# label the median yards line
annotate("text", label = "Median Yards", x = median(Rec_final_clean_nfl$Yards), y = 120, color = "black")
library(shiny)
library(ggplot2)
library(shinydashboard)
library(dplyr)
ggplot(cutcap_nfl, aes(x = Catch_Rate, y = Salary)) +
geom_point(size = 3, color = '#FD5E48') +
labs(title = "Salary vs. Catch Rate",
x = "Catch Rate",
y = "2024 Salary ($)") +
ylim(500000, 1505000) +
# add vertical line at mean catch rate; catch rate is normally distributed
geom_vline(xintercept = mean(cutcap_nfl$Catch_Rate), color = "darkgrey") +
theme_minimal() +
# label the mean catch rate line
annotate("text", label = "Mean Catch Rate", x = mean(cutcap_nfl$
Catch_Rate), y = 1300000, color = "black")
# This is the code for the app for final project!
# import data and install packages
library(shiny)
library(ggplot2)
library(shinydashboard)
library(dplyr)
final_clean_nfl <- read.csv("final_clean_nfl.csv")
setwd("~/GitHub/stat321-project/nflapp")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
# This is the code for the app for final project!
# import data and install packages
library(shiny)
library(ggplot2)
library(shinydashboard)
library(dplyr)
final_clean_nfl <- read.csv("final_clean_nfl.csv")
# making the IQR-capped salary data
q1 <- quantile(final_clean_nfl$Salary, 0.25)
q3 <- quantile(final_clean_nfl$Salary, 0.75)
iqr <- q3 - q1
lower <- q1 - 1.5*iqr
upper <- q3 + 1.5*iqr
sal <- ifelse(final_clean_nfl$Salary < lower, lower, ifelse(final_clean_nfl$
Salary > upper, upper, final_clean_nfl$Salary))
sort(sal)
# making the salary dataset with upper outliers removed to see a trend
cutcap_nfl <- final_clean_nfl
cutcap_nfl$capSalary <- sal
cutcap_nfl <- cutcap_nfl %>%
arrange(capSalary)
cutcap_nfl <- head(cutcap_nfl, 80)
cutcap_nfl <- cutcap_nfl %>%
select(2, 14, 16)
# renaming columns so that they are nicer in interactive plot output
colnames(cutcap_nfl) <- c("Player", "Catch_Rate", "Salary")
# making the datasets for other figures smaller to only contain desired columns
Rec_final_clean_nfl <- final_clean_nfl %>%
select(2, 3, 4)
# once again, renaming columns so they are nicer in the interactive plot output
colnames(Rec_final_clean_nfl) <- c("Player", "Receptions", "Yards")
TD_final_clean_nfl <- final_clean_nfl %>%
select(2, 4, 5)
colnames(TD_final_clean_nfl) <- c("Player", "Yards", "Touchdowns")
#UI
ui_nfl <- fluidPage(
titlePanel(title = "NFL Receiver Performance Analysis"),
tabsetPanel(
tabPanel(
"Salary Histogram",
# slider input to adjust histogram number of bins
sliderInput("bins", "Number of Bins:", min = 10, max = 50, value = 10),
plotOutput("SalaryHist")
),
tabPanel("Salary vs. Catch Rate",
# click = ... is to detect which points user clicks on/near
plotOutput("Salary_catchRate", click = "Salary_catchRate_click"),
# textOutput for prompt to select a point
textOutput("Salselect"),
# text that is outputted following click on/near a point
verbatimTextOutput("salinfo")
),
tabPanel("Receptions vs. Yards",
plotOutput("Rec_Yds", click = "Rec_Yds_click"),
textOutput("Recselect"),
verbatimTextOutput("Recinfo")
),
tabPanel("Touchdowns vs. Yards",
plotOutput("TD_Yds", click = "TD_Yds_click"),
textOutput("TDselect"),
verbatimTextOutput("TDinfo")
)
)
)
ggplot(cutcap_nfl, aes(x = Catch_Rate, y = Salary)) +
geom_point(size = 3, color = '#FD5E48') +
labs(title = "Salary vs. Catch Rate",
x = "Catch Rate",
y = "2024 Salary ($)") +
ylim(500000, 1505000) +
# add vertical line at mean catch rate; catch rate is normally distributed
geom_vline(xintercept = mean(cutcap_nfl$Catch_Rate), color = "darkgrey") +
theme_minimal() +
# label the mean catch rate line
annotate("text", label = "Mean Catch Rate", x = mean(cutcap_nfl$
Catch_Rate), y = 1300000, color = "black")
ggplot(Rec_final_clean_nfl, aes(x = Yards, y = Receptions)) +
geom_point(size = 3, color = '#e5ba37') +
labs(title = "Receptions vs. Yards",
x = "Yards",
y = "Receptions") +
ylim(30, 130) +
xlim(300, 1800) +
# add a vertical line at the median yards because yards is skewed
geom_vline(xintercept = median(Rec_final_clean_nfl$Yards), color = "darkgrey") +
theme_minimal() +
# label the median yards line
annotate("text", label = "Median Yards", x = median(Rec_final_clean_nfl$Yards), y = 120, color = "black")
})
ggplot(TD_final_clean_nfl, aes(x = Yards, y = Touchdowns)) +
geom_point(size = 3, color = '#3d939c') +
labs(title = "Touchdowns vs. Yards",
x = "Yards",
y = "Touchdowns") +
ylim(0, 18) +
xlim(300, 1800) +
# add a vertical line at the median Yards because yards is skewed
geom_vline(xintercept = median(TD_final_clean_nfl$Yards), color = "darkgrey") +
theme_minimal() +
# label the median yards line
annotate("text", label = "Median Yards", x = median(TD_final_clean_nfl$Yards), y = 17, color = "black")
ggplot(cutcap_nfl, aes(x = Catch_Rate, y = Salary)) +
geom_point(size = 3, color = '#FD5E48') +
labs(title = "Salary vs. Catch Rate",
x = "Catch Rate",
y = "2024 Salary ($)") +
ylim(500000, 1505000) +
# add vertical line at mean catch rate; catch rate is normally distributed
geom_vline(xintercept = mean(cutcap_nfl$Catch_Rate), color = "darkgrey") +
theme_minimal() +
# label the mean catch rate line
annotate("text", label = "Mean Catch Rate", x = mean(cutcap_nfl$
Catch_Rate), y = 1300000, color = "black")
citation()
output$SalaryHist <- renderPlot({
salary_data <- cutcap_nfl$Salary
ggplot(data = data.frame(x = salary_data), aes(x = cutcap_nfl$Salary)) +
geom_histogram(fill = '#b2c655', color = "white", bins = input$bins) +
# input$bins allows for interactive input; for report, code was bins = 10
theme_minimal() +
labs(
title = "2024 NFL Receiver Salaries",
x = "Capped Salary ($)",
y = "Frequency"
)
output$SalaryHist <- renderPlot({
salary_data <- cutcap_nfl$Salary
ggplot(data = data.frame(x = salary_data), aes(x = cutcap_nfl$Salary)) +
geom_histogram(fill = '#b2c655', color = "white", bins = 10) +
# input$bins allows for interactive input; for report, code was bins = 10
theme_minimal() +
labs(
title = "2024 NFL Receiver Salaries",
x = "Capped Salary ($)",
y = "Frequency"
)
})
fwef
sblj sb
output$SalaryHist <- renderPlot({
salary_data <- cutcap_nfl$Salary
ggplot(data = data.frame(x = salary_data), aes(x = cutcap_nfl$Salary)) +
geom_histogram(fill = '#b2c655', color = "white", bins = 10) +
# input$bins allows for interactive input; for report, code was bins = 10
theme_minimal() +
labs(
title = "2024 NFL Receiver Salaries",
x = "Capped Salary ($)",
y = "Frequency"
)
})
ggplot(data = data.frame(x = salary_data), aes(x = cutcap_nfl$Salary)) +
geom_histogram(fill = '#b2c655', color = "white", bins = 10) +
# input$bins allows for interactive input; for report, code was bins = 10
theme_minimal() +
labs(
title = "2024 NFL Receiver Salaries",
x = "Capped Salary ($)",
y = "Frequency"
)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
# This is the code for the app for final project!
# import data and install packages
library(shiny)
library(ggplot2)
library(shinydashboard)
library(dplyr)
final_clean_nfl <- read.csv("final_clean_nfl.csv")
# making the IQR-capped salary data
q1 <- quantile(final_clean_nfl$Salary, 0.25)
q3 <- quantile(final_clean_nfl$Salary, 0.75)
iqr <- q3 - q1
lower <- q1 - 1.5*iqr
upper <- q3 + 1.5*iqr
sal <- ifelse(final_clean_nfl$Salary < lower, lower, ifelse(final_clean_nfl$
Salary > upper, upper, final_clean_nfl$Salary))
sort(sal)
# making the salary dataset with upper outliers removed to see a trend
cutcap_nfl <- final_clean_nfl
cutcap_nfl$capSalary <- sal
cutcap_nfl <- cutcap_nfl %>%
arrange(capSalary)
cutcap_nfl <- head(cutcap_nfl, 80)
cutcap_nfl <- cutcap_nfl %>%
select(2, 14, 16)
# renaming columns so that they are nicer in interactive plot output
colnames(cutcap_nfl) <- c("Player", "Catch_Rate", "Salary")
# making the datasets for other figures smaller to only contain desired columns
Rec_final_clean_nfl <- final_clean_nfl %>%
select(2, 3, 4)
# once again, renaming columns so they are nicer in the interactive plot output
colnames(Rec_final_clean_nfl) <- c("Player", "Receptions", "Yards")
TD_final_clean_nfl <- final_clean_nfl %>%
select(2, 4, 5)
colnames(TD_final_clean_nfl) <- c("Player", "Yards", "Touchdowns")
#UI
ui_nfl <- fluidPage(
titlePanel(title = "NFL Receiver Performance Analysis"),
tabsetPanel(
tabPanel(
"Salary Histogram",
# slider input to adjust histogram number of bins
sliderInput("bins", "Number of Bins:", min = 10, max = 50, value = 10),
plotOutput("SalaryHist")
),
tabPanel("Salary vs. Catch Rate",
# click = ... is to detect which points user clicks on/near
plotOutput("Salary_catchRate", click = "Salary_catchRate_click"),
# textOutput for prompt to select a point
textOutput("Salselect"),
# text that is outputted following click on/near a point
verbatimTextOutput("salinfo")
),
tabPanel("Receptions vs. Yards",
plotOutput("Rec_Yds", click = "Rec_Yds_click"),
textOutput("Recselect"),
verbatimTextOutput("Recinfo")
),
tabPanel("Touchdowns vs. Yards",
plotOutput("TD_Yds", click = "TD_Yds_click"),
textOutput("TDselect"),
verbatimTextOutput("TDinfo")
)
)
)
salary_data <- cutcap_nfl$Salary
ggplot(data = data.frame(x = salary_data), aes(x = cutcap_nfl$Salary)) +
geom_histogram(fill = '#b2c655', color = "white", bins = 10) +
# input$bins allows for interactive input; for report, code was bins = 10
theme_minimal() +
labs(
title = "2024 NFL Receiver Salaries",
x = "Capped Salary ($)",
y = "Frequency"
)
