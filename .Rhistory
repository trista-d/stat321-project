# visualize clusters
iris_clustered <- iris
iris_clustered$Cluster <- as.factor(kmeans_result$cluster)
ggplot(iris_clustered, aes(x = Sepal.Length, y = Sepal.Width, color = Cluster)) +
geom_point(size = 3) +
labs(title = "K-Means Clustering on Iris Data",
x = "Sepal Length", y = "Sepal Width") +
theme_minimal()
# applying k-means
set.seed(123) # Ensuring reproducibility
kmeans_result <- kmeans(iris_data, centers = 3, nstart = 25)
# Print clustering result
kmeans_result
# compare clusters with actual species labels
table(iris$Species, kmeans_result$cluster)
# visualize clusters
iris_clustered <- iris
iris_clustered$Cluster <- as.factor(kmeans_result$cluster)
ggplot(iris_clustered, aes(x = Sepal.Length, y = Sepal.Width, color = Cluster)) +
geom_point(size = 3) +
labs(title = "K-Means Clustering on Iris Data",
x = "Sepal Length", y = "Sepal Width") +
theme_minimal()
# Find the optima;
# applying k-means
set.seed(123) # Ensuring reproducibility
kmeans_result <- kmeans(iris_data, centers = 3, nstart = 25)
# Load dataset
data(iris)
# View first few rows
head(iris)
# How many species are there?
table(iris$Species)
# check if specis is distinguishable by sepal length & sepal width
library(ggplot2)
ggplot(iris, aes(
x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point(size = 3) +
labs(title = "Scatter Plot of Sepal Length vs Width",
x = "Sepal Length", y = "Sepal Width") +
theme_minimal()
# setsosa is well-separated, versicolor/virginica overlap
# Remove species column
iris_data <- iris[, -5]
# Summary statistics
summary(iris_data)
ggplot(iris, aes(
x = Sepal.Length, y = Sepal.Width)) +
geom_point(size = 3) +
labs(title = "Scatter Plot of Sepal Length vs Width",
x = "Sepal Length", y = "Sepal Width") +
theme_minimal()
# applying k-means
set.seed(123) # Ensuring reproducibility
kmeans_result <- kmeans(iris_data, centers = 3, nstart = 25)
# Print clustering result
kmeans_result
# compare clusters with actual species labels
table(iris$Species, kmeans_result$cluster)
# visualize clusters
iris_clustered <- iris
iris_clustered$Cluster <- as.factor(kmeans_result$cluster)
ggplot(iris_clustered, aes(x = Sepal.Length, y = Sepal.Width, color = Cluster)) +
geom_point(size = 3) +
labs(title = "K-Means Clustering on Iris Data",
x = "Sepal Length", y = "Sepal Width") +
theme_minimal()
# Plot Elbow Curve
plot(1:10, wcss, type = "b", pch = 19, col = "blue",
xlab = "Number of Clusters (K)", ylab = "Total Within-Cluster Sum of Squares",
main = "Elbow Method for Optimal K")
# Find the optimal number of clustes using the Elbow Method
wcss <- c()
for (k in 1:10) {
model <- kmeans(iris_data, centers = k, nstart = 25)
wcss[k] <- model$tot.withinss
}
# Plot Elbow Curve
plot(1:10, wcss, type = "b", pch = 19, col = "blue",
xlab = "Number of Clusters (K)", ylab = "Total Within-Cluster Sum of Squares",
main = "Elbow Method for Optimal K")
# Silhouette score
library(cluster)
silhouette_score <- silhouette(kmeans_result$cluster, dist(iris_data))
# Silhouette score
library(cluster)
silhouette_score <- silhouette(kmeans_result$cluster, dist(iris_data))
plot(silhouette_score, col = 2:4,
border = NA,
main = "Silhouette Score Plot")
# Silhouette score
library(cluster)
silhouette_score <- silhouette(kmeans_result$cluster, dist(iris_data))
plot(silhouette_score, col = 2:4, border = NA,
main = "Silhouette Score Plot")
?kmeans
boxplot(Salary)
boxplot(sal)
plot(catchRate, Salary)
library(dplyr)
library(readr)
data <- read_csv("final_clean_nfl.csv")
attach(data)
setwd("C:/Users/tdham/OneDrive/School/University/Year 4/STAT 321/stat321-project")
data <- read_csv("final_clean_nfl.csv")
data <- arrange(data, data$Salary)
attach(data)
boxplot(Salary)
plot(catchRate, Salary)
abline(model, col="red")
?boxcox
?MASS:boxcox
?MASS::boxcox
# box-cox transformation
MASS::boxcox(Salary)
# MODEL 1: Salary ~ catchRate
boxplot(Salary)
plot(catchRate, Salary)
model <- lm(Salary~catchRate)
summary(model)
plot(catchRate, Salary)
abline(model, col="red")
qqnorm(model$residuals)
plot(model$fitted.values, model$residuals)
abline(h=0)
# box-cox transformation
MASS::boxcox(model)
# box-cox transformation
MASS::boxcox(model)
var <- MASS::boxcox(model)
var$x
var$y
b.transform
# box-cox transformation
b.transform <- MASS::boxcox(model)
# box-cox transformation
b.transform <- MASS::boxcox(model)
b.transform
plot(b.transform)
# box-cox transformation
b.transform <- MASS::boxcox(model)
plot(b.transform, ylab="log-likelihood", xlab="lambda")
# box-cox transformation
MASS::boxcox(model)
lambda <- b$x[which.max(b$y)]
b <- MASS::boxcox(model)
lambda <- b$x[which.max(b$y)]
lambda
b_salary <- (Salary^lambda - 1) / lambda
b_salary
boxplot(b_salary)
plot(catchRate, Salary)
b_salary <- (Salary^0.2 - 1) / lambda
boxplot(b_salary)
plot(catchRate, Salary)
b_salary <- (Salary^-0.13 - 1) / lambda
boxplot(b_salary)
plot(catchRate, Salary)
b_salary <- (Salary^lambda - 1) / lambda
boxplot(b_salary)
plot(catchRate, Salary)
plot(catchRate, Salary)
plot(catchRate, b_salary)
plot((catchRate^lambda - 1) / lambda, Salary)
?MASS::boxcox
# default = 6
options(digits=10)
b <- MASS::boxcox(model)
lambda <- b$x[which.max(b$y)]
b_salary <- (Salary^lambda - 1) / lambda
boxplot(b_salary)
plot(catchRate, b_salary)
b_salary
model <- lm(Salary~catchRate)
summary(model)
plot(catchRate, Salary)
abline(model, col="red")
b.model <- lm(b.salary~catchRate)
b.salary <- (Salary^lambda - 1) / lambda
boxplot(b_salary)
plot(catchRate, b.salary)
b.model <- lm(b.salary~catchRate)
summary(b.model)
qqnorm(model$residuals)
plot(model$fitted.values, model$residuals)
abline(h=0)
qqnorm(model$residuals)
model$residuals
plot(model)
model.rem <- lm(Salary[1:80]~catchRate[1:80])
# remove outliers and do box-cox
b_removed <- MASS::boxcox(model.rem)
lambda <- b_removed$x[which.max(b_removed$y)]
b_removed.salary <- (Salary[1:80]^lambda - 1) / lambda
boxplot(b_removed.salary)
plot(catchRate, b_removed.salary)
b.model <- lm(b.salary~catchRate)
qqnorm(b.model$residuals)
plot(b.model$fitted.values, b.model$residuals)
abline(h=0)
b_removed.model <- lm(b_removed.salary~catchRate[1:80])
b_removed.model <- lm(b_removed.salary~catchRate[1:80])
summary(b_removed.model)
plot(catchRate, b.model)
plot(catchRate[1:80], b_removed.model)
plot(catchRate[1:80], b_removed.salary)
plot(catchRate[1:80], b_removed.salary)
abline(b_removed.model, col="red")
abline(b_removed.model, col="red")
qqnorm(b_removed.model$residuals)
plot(b_removed.model$fitted.values, b_removed.model$residuals)
abline(h=0)
qqnorm(b_removed.model$residuals)
# remove outliers and do box-cox
b_removed <- MASS::boxcox(model.rem)
lambda <- b_removed$x[which.max(b_removed$y)]
b_removed.salary <- (Salary[1:80]^lambda - 1) / lambda
boxplot(b_removed.salary)
plot(catchRate, b_removed.salary)
b_removed.model <- lm(b_removed.salary~catchRate[1:80])
summary(b_removed.model)
plot(catchRate[1:80], b_removed.salary)
abline(b_removed.model, col="red")
qqnorm(b_removed.model$residuals)
plot(b_removed.model$fitted.values, b_removed.model$residuals)
abline(h=0)
plot(catchRate[1:80], b_removed.salary)
abline(b_removed.model, col="red")
# remove outliers
boxplot(Salary[1:80])
plot(catchRate[1:80], Salary[1:80])
model.rem <- lm(Salary[1:80]~catchRate[1:80])
summary(model)
plot(catchRate[1:80], Salary[1:80])
abline(model, col="red")
qqnorm(model$residuals)
plot(model$fitted.values, model$residuals)
abline(h=0)
summary(model.rem)
model.rem <- lm(Salary[1:80]~catchRate[1:80])
summary(model.rem)
plot(catchRate[1:80], Salary[1:80])
abline(model.rem, col="red")
qqnorm(model.rem$residuals)
plot(model.rem$fitted.values, model.rem$residuals)
abline(h=0)
qqnorm(b.model$residuals)
plot(b.model$fitted.values, b.model$residuals)
abline(h=0)
qqnorm(model.rem$residuals)
plot(model.rem$fitted.values, model.rem$residuals)
abline(h=0)
?select
names(data)
# Other models
new_data <- data %>% select(Rec)
pairs(new_data)
# Other models
new_data <- data %>% select(Rec, TD)
# Other models
new_data <- data %>% select(Rec, Yds, TD, X20., X40, X20.39, X1st, Rec.FUM,
Rec.YAC.R, Tgts, catchRate, Salary)
# Other models
new_data <- data %>% select(Rec, Yds, TD, X20., X.40, X20.39, X1st, Rec.FUM,
Rec.YAC.R, Tgts, catchRate, Salary)
# Other models
new_data <- data %>% select(Rec, Yds, TD, X20., X40., X20.39, X1st, Rec.FUM,
Rec.YAC.R, Tgts, catchRate, Salary)
# Other models
new_data <- data %>% select(Rec, Yds, TD, X20., X40., X20.39, X1st., Rec.FUM,
Rec.YAC.R, Tgts, catchRate, Salary)
# Other models
new_data <- data %>% select(Rec, Yds, TD, X20., X40., X20.39, X1st., Rec.FUM,
Rec.YAC.R, Tgts, catchRate, Salary)
pairs(new_data)
# Other models
new_data <- data %>% select(Rec, Yds, TD, X20., X40., X20.39, X1st., Rec.FUM,
Rec.YAC.R, Tgts, catchRate)
pairs(new_data)
# Other models
new_data <- data %>% select(Rec, Yds, TD, X20., X40., X20.39, X1st.,
Rec.YAC.R, Tgts, catchRate)
pairs(new_data)
hist(TD)
# Other models
new_data <- data %>% select(Rec, Yds, TD, X20., X40., X20.39, X1st.,
Rec.YAC.R, Tgts, catchRate)
pairs(new_data)
model3 <- lm(TD ~Rec.1st)
summary(model3)
qqnorm(model3$residuals)
plot(model3$fitted.values, model3$residuals)
model3 <- lm(TD ~Rec.1st + Yds)
summary(model3)
qqnorm(model3$residuals)
plot(model3$fitted.values, model3$residuals)
abline(h=0)
model3 <- lm(TD ~Rec + Yds)
summary(model3)
qqnorm(model3$residuals)
plot(model3$fitted.values, model3$residuals)
abline(h=0)
pairs(new_data)
names(data)
full_model <- lm(TD~., data=new_data)
s <- step(full_model, direction="backward")
summary(s)
plot(s)
full_model <- lm(TD~., data=data)
s <- step(full_model, direction="backward")
names(data)
full_model <- lm(TD~., data=data[,-5])
s <- step(full_model, direction="backward")
full_model
full_model <- lm(TD~., data=data[,c(-1, -2, -5)])
s <- step(full_model, direction="backward")
summary(s)
plot(s)
# step-wise selection to predict TD
full_model <- lm(TD~., data=data[,c(-1, -2, -5)])
s <- step(full_model, direction="stepwise")
summary(s)
# step-wise selection to predict TD
full_model <- lm(TD~., data=data[,c(-1, -2, -5)])
s <- step(full_model, direction="both")
summary(s)
plot(s)
names(data)
# step-wise selection to predict TD
td_model_data <- data[,c(-1, -2, -5, -13)]
full_model <- lm(TD~., data=td_model_data)
s <- step(full_model, direction="backward")
# Other models
# remove Rec.1st, Rec.FUM, Salary (collinear)
new_data <- data %>% select(Rec, Yds, TD, X20., X40., X20.39, X1st.,
Rec.YAC.R, Tgts, catchRate)
pairs(new_data)
summary(lm(Rec.YAC.R~catchRate))
plot(Rec.YAC.R~catchRate)
summary(lm(Rec.YAC.R~catchRate))
plot(lm(Rec.YAC.R~catchRate))
summary(yac.catchrate)
yac.catchrate <- lm(Rec.YAC.R~catchRate^2)
summary(yac.catchrate)
pairs(new_data)
model3 <- lm(TD ~ Rec + Yds)
summary(model3)
qqnorm(model3$residuals)
model3 <- lm(TD ~ Rec * Yds)
summary(model3)
qqnorm(model3$residuals)
plot(model3$fitted.values, model3$residuals)
plot(Rec.1st, TD)
abline(model3, col="red")
# POISSON MODELS:
# Rec ~ Yds
rec.yds <- glm()
# TD ~ Rec.1st
plot(Rec.1st, TD)
plot(Rec.YAC.R~catchRate)
yac.catchrate <- lm(Rec.YAC.R~catchRate^2)
summary(yac.catchrate)
qqnorm(yac.catchrate)
yac.catchrate <- lm(Rec.YAC.R~catchRate^2)
summary(yac.catchrate)
qqnorm(yac.catchrate)
qqnorm(yac.catchrate$residuals)
plot(yac.catchrate$fitted.values, yac.catchrate$residuals)
yac.catchrate <- lm(Rec.YAC.R~catchRate^2)
summary(yac.catchrate)
qqnorm(yac.catchrate$residuals)
plot(yac.catchrate$fitted.values, yac.catchrate$residuals)
abline(h=0)
yac.catchrate <- lm(Rec.YAC.R~catchRate)
summary(yac.catchrate)
qqnorm(yac.catchrate$residuals)
plot(yac.catchrate$fitted.values, yac.catchrate$residuals)
abline(h=0)
yac.catchrate <- lm(Rec.YAC.R~catchRate^2)
summary(yac.catchrate)
qqnorm(yac.catchrate$residuals)
plot(yac.catchrate$fitted.values, yac.catchrate$residuals)
plot(Rec.YAC.R~catchRate)
plot(Rec.YAC.R~catchRate^2)
plot(Rec.YAC.R~catchRate^2)
plot(catchRate^2, Rec.YAC.R)
plot(catchRate^2, Rec.YAC.R)
yac.catchrate <- lm(Rec.YAC.R~catchRate)
plot(catchRate, Rec.YAC.R)
plot(catchRate, log(Rec.YAC.R))
plot(catchRate, Rec.YAC.R)
yac.catchrate <- lm(Rec.YAC.R~catchRate)
summary(yac.catchrate)
qqnorm(yac.catchrate$residuals)
plot(yac.catchrate$fitted.values, yac.catchrate$residuals)
yac.catchrate <- lm(catchRate~Rec.YAC.R)
summary(yac.catchrate)
qqnorm(yac.catchrate$residuals)
plot(yac.catchrate$fitted.values, yac.catchrate$residuals)
abline(h=0)
plot(Rec.YAC.R, catchRate)
yac.catchrate <- lm(catchRate~Rec.YAC.R^2)
summary(yac.catchrate)
qqnorm(yac.catchrate$residuals)
plot(yac.catchrate$fitted.values, yac.catchrate$residuals)
abline(h=0)
yac.catchrate <- lm(catchRate~Rec.YAC.R)
summary(yac.catchrate)
qqnorm(yac.catchrate$residuals)
plot(yac.catchrate$fitted.values, yac.catchrate$residuals)
abline(h=0)
yac.catchrate <- lm(catchRate~Rec.YAC.R)
# Rec.YAC.R
plot(catchRate, Rec.YAC.R)
yac.catchrate <- lm(catchRate~Rec.YAC.R)
summary(yac.catchrate)
qqnorm(yac.catchrate$residuals)
plot(yac.catchrate$fitted.values, yac.catchrate$residuals)
abline(h=0)
model3 <- lm(TD ~ Rec * Yds)
summary(model3)
plot(yac.catchrate$fitted.values, yac.catchrate$residuals)
abline(h=0)
model3 <- lm(TD ~ Rec * Yds)
summary(model3)
full_model <- lm(TD~*., data=td_model_data)
full_model <- lm(TD~*, data=td_model_data)
full_model <- lm(TD~.*, data=td_model_data)
full_model <- lm(TD~., data=td_model_data)
full_model <- lm(TD~., data=td_model_data)
s <- step(full_model, direction="backward")
summary(s)
plot(s)
td_model_data
# stepwise selection for multiple regression (don't have to visualize)
# step-wise selection to predict TD
td_model_data <- data[,c(-1, -2, -5, -13)]
td_model_data$Salary <- b.salary
full_model <- lm(TD~., data=td_model_data)
s <- step(full_model, direction="backward")
summary(s)
# stepwise selection for multiple regression (don't have to visualize)
# step-wise selection to predict TD
td_model_data <- data[,c(-1, -2, -5, -13)]
td_model_data$Salary <- b.salary
td_modeL_data
td_model_data
full_model <- lm(TD~., data=td_model_data)
s <- step(full_model, direction="backward")
summary(s)
plot(s)
# stepwise selection for multiple regression (don't have to visualize)
# step-wise selection to predict TD
td_model_data <- data[,c(-1, -2, -5)]
full_model <- lm(TD~., data=td_model_data)
s <- step(full_model, direction="backward")
summary(s)
plot(s)
# TD ~ Rec.1st
plot(Rec.1st, TD)
# POISSON MODELS:
# Rec ~ Yds
plot(Rec~Yds)
rec.yds <- glm(Rec ~ Yds, family='poisson')
summary(rec.yds)
hist(Rec)
# POISSON MODELS:
# Rec ~ Yds
plot(Rec~Yds)
rec.yds <- lm(Rec ~ Yds)
summary(rec.yds)
# POISSON MODELS:
# Rec ~ Yds
plot(Rec~Yds)
rec.yds <- lm(Rec ~ Yds)
summary(rec.yds)
qqnorm(rec.yds$residuals)
plot(rec.yds$fitted.values, rec.yds$residuals)
abline(h=0)
# POISSON MODELS:
# Rec ~ Yds
plot(Rec~Yds)
rec.yds <- glm(Rec ~ Yds, family='poisson')
summary(rec.yds)
qqnorm(rec.yds$residuals)
plot(rec.yds$fitted.values, rec.yds$residuals)
abline(h=0)
# POISSON MODELS:
# TD ~ Yds
plot(TD~Yds)
td.yds <- glm(Rec ~ Yds, family='poisson')
summary(td.yds)
# POISSON MODELS:
# TD ~ Yds
hist(Td)
# POISSON MODELS:
# TD ~ Yds
hist(TD)
plot(TD~Yds)
td.yds <- glm(Rec ~ Yds, family='poisson')
summary(td.yds)
qqnorm(td.yds$residuals)
plot(td.yds$fitted.values, td.yds$residuals)
abline(h=0)
# TD ~ Rec.1st
hist(TD)
plot(TD ~ Rec.1st)
td.rec.1st <- glm(TD ~ Rec.1st, family='poisson')
summary(td.rec.1st)
qqnorm(td.rec.1st$residuals)
plot(td.rec.1st$fitted.values, td.rec.1st$residuals)
abline(h=0)
